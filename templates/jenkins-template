#!/usr/bin/env groovy

pipeline {
  agent { label 'master' }
  environment {
    tag_ver = sh (
      script: "git tag -l --sort=v:refname | tail -1",
      returnStdout: true
      ).trim()
      cluster_name = "${params.cluster_name}"
      project_name = "${params.project_name}"
      file_id = "${params.file_id}"
    }
    stages {
      stage('load env') {
        steps {
           configFileProvider([configFile(fileId: "${file_id}", variable: 'ENV_FILE')]) {
           echo " =========== ^^^^^^^^^^^^ Reading config from pipeline script "
           sh "rm -rf .env"
           sh "cp ${env.ENV_FILE} .env"
          }
        }
      }
      stage('build') {
        steps {
          sh "sed -i \'s:latest:${tag_ver}:\' _COMPOSE_FILE_NAME"
          sh "docker-compose -f _COMPOSE_FILE_NAME build"
          sh "docker images"
        }
      }
      stage('kompose') {
        steps {
          sh "kompose convert -f _COMPOSE_FILE_NAME"
          sh "sed -i \'s:io.kompose.service:app:\' _IMAGE_NAME-deployment.yaml"
          sh "sed -i \'s:io.kompose.service:app:\' _IMAGE_NAME-service.yaml"
          sh "sed -i \'s:\"_EXPOSED_PORT\":\"http\":\' _IMAGE_NAME-service.yaml"
          sh "gcloud container clusters get-credentials  ${cluster_name} --zone asia-southeast1-a --project ${project_name}"
        }
      }
      stage('push') {
        steps {
          retry(10) {
            sh "gcloud docker -- push gcr.io/${project_name}/_IMAGE_NAME:${tag_ver}"
          }
          timeout(time: 20, unit: 'MINUTES') {
            sh 'echo checking health...'
          }
        }
      }
      stage('deploy') {
        steps {
          sh '''
            if
              kubectl get svc -n _NAMESPACE_NAME | grep -q _IMAGE_NAME
            then
              kubectl apply -f _IMAGE_NAME-deployment.yaml -n _NAMESPACE_NAME
            else
              kubectl create -f _IMAGE_NAME-deployment.yaml -f _IMAGE_NAME-service.yaml -n _NAMESPACE_NAME
            fi
          '''
        }
      }
    }
  }
