// Code generated by go-bindata.
// sources:
// templates/compose-dev-template
// templates/compose-template
// templates/docker-template
// templates/jenkins-template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesComposeDevTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x6e\xc3\x20\x10\x86\x77\x4b\x7e\x87\x93\xf7\xd8\x52\x47\xb6\x28\xa1\x6d\xda\xa6\x8e\x92\x0c\xdd\x10\x31\x17\x0b\x85\x40\x74\x60\x9a\xc7\xaf\x6c\xa8\xea\xa8\x4c\xdc\xcf\xf7\xdd\x71\x11\xc9\x6b\x67\x19\x54\x4f\x55\x59\x94\x85\x47\x8a\xba\x43\xcf\xca\x02\x40\x6c\xb6\xcb\x17\x2e\x3e\x97\x5b\x3e\xd5\x00\xfa\x2a\x7b\x64\xd0\x77\x54\x6b\xd7\x88\xdd\xbe\x7d\xe3\xab\xe3\x44\x34\x73\xda\xc8\x80\x3e\x24\xe7\x34\x68\xa3\xb2\x0f\xd0\x39\x1b\xf0\x1e\x18\xd4\xbf\x89\x72\xdd\x05\xe9\xac\x0d\xb2\xd9\xdd\x37\x62\xdd\xae\xde\xf9\x5e\x3c\x6f\x3e\x52\xd7\x24\xa0\x8d\x22\xc1\x35\xda\x98\xb2\xb1\xa9\xd4\x16\x49\x58\x79\x45\x06\xd5\xec\x2f\x55\x42\xbe\x1d\x5d\xb4\xed\x85\xd2\xc4\xa0\x19\x3c\x35\x9e\xba\x46\xde\x6e\xe9\x39\x3a\x33\x5c\xf3\xda\xe3\x59\x40\xcd\xfe\x53\x37\x47\x61\xce\x54\xe2\xb5\x3d\x1c\xc5\xae\xdd\x1f\x99\xe0\x5f\xbb\xf6\xc0\xd7\x53\x95\x87\x5a\x0c\xe3\xdc\xb9\xa2\xf0\x2c\x07\x13\xfe\x82\x13\x69\xd5\xe3\x22\xa3\x65\xf1\xe0\x64\x3a\xfb\x8a\x74\x44\x62\x59\x19\xb3\x47\x39\x63\x78\x0f\x48\x56\x1a\x06\x81\x06\x2c\x8b\x9f\x00\x00\x00\xff\xff\xec\x42\x5d\x5a\xe4\x01\x00\x00")

func templatesComposeDevTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeDevTemplate,
		"templates/compose-dev-template",
	)
}

func templatesComposeDevTemplate() (*asset, error) {
	bytes, err := templatesComposeDevTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-dev-template", size: 484, mode: os.FileMode(511), modTime: time.Unix(1542274267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComposeTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4e\xc3\x30\x10\x44\xef\x91\xf2\x0f\x2b\xdf\x89\x25\x8e\xbe\x55\xad\x41\x05\x4a\xa2\xd0\x03\xb7\x95\x71\x96\x68\xd5\xd4\x8e\xd6\x6e\xe0\xf3\x11\x35\xa0\x70\xdb\x99\x7d\x33\x9a\x85\x24\x71\x0c\x06\xd4\xad\xaa\xab\xba\x4a\x24\x0b\x7b\x4a\xa6\xae\x00\x70\x7f\xd8\xdc\x5b\x7c\xde\x1c\xec\x55\x03\xf0\xd9\x8d\x64\x60\xf4\xd2\x70\xd4\xd8\xf5\xed\x83\xdd\x1e\xaf\x84\x5e\xd3\x93\xcb\x94\x72\xc9\xbc\x5d\x78\x1a\x7e\xf2\x00\x3e\x86\x4c\x9f\xd9\x40\xf3\xeb\x0c\xd1\x9f\x48\xde\x79\x22\xb3\xba\x93\xc6\x5d\xbb\x7d\xb4\x3d\xde\xed\x9f\x4a\x6b\x09\x50\x58\xb0\xc0\x0d\x85\xa5\x78\xdf\xa5\x8e\x03\x09\x06\x77\x26\x03\x6a\xb5\x45\x15\xe4\x23\xca\x89\xc3\x88\x03\x8b\x01\x7d\x49\xa2\x93\x78\xed\xe6\xb9\xbc\xe7\x28\x39\xfd\x8d\xbc\x01\x85\xf6\xb5\x6b\x5f\xec\x0e\xbb\xb6\x3f\x9a\x7f\x4a\xd5\xd5\x57\x00\x00\x00\xff\xff\xbf\x61\xfb\xaa\x37\x01\x00\x00")

func templatesComposeTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeTemplate,
		"templates/compose-template",
	)
}

func templatesComposeTemplate() (*asset, error) {
	bytes, err := templatesComposeTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-template", size: 311, mode: os.FileMode(511), modTime: time.Unix(1542274267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x88\x77\x72\x0c\x76\x8d\xf7\xf4\x75\x74\x77\xe5\xe5\xe2\xe5\x72\x8d\x08\xf0\x0f\x76\x55\x88\x87\xd0\x2e\xf1\x01\xfe\x41\x21\x80\x00\x00\x00\xff\xff\x6a\xb8\xec\x2a\x28\x00\x00\x00")

func templatesDockerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerTemplate,
		"templates/docker-template",
	)
}

func templatesDockerTemplate() (*asset, error) {
	bytes, err := templatesDockerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-template", size: 40, mode: os.FileMode(511), modTime: time.Unix(1539084282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4b\x6f\xe3\x36\x10\xbe\x07\xc8\x7f\xf8\xd6\x35\x56\x36\x60\xca\x9b\x3d\xca\xf0\x21\x58\x78\x8b\x00\x4d\x36\x68\xda\x5e\x9a\xd6\xa0\xa5\x91\xc4\x86\x22\x55\x92\x52\xe1\x7a\xfd\xdf\x17\x74\xa4\x48\x7e\xe4\xa5\x0b\xc5\x99\xe1\xc7\x79\x7c\x33\xfc\xe9\xc3\xb4\xb2\x66\xba\x12\x6a\x4a\xaa\x46\x66\xb4\xae\xd7\xe7\x67\xe7\x67\xa5\x28\x49\x0a\x45\xd8\x9c\x9f\x01\x3c\x23\xe5\xb0\x81\xe4\x2b\x92\x08\x0a\x6e\x1d\x99\x00\x5b\xaf\x23\x55\x0b\xa3\x55\xb1\xb3\xf0\x02\xc0\xf1\x6c\x59\x93\xc1\x1c\x36\xc7\xe8\x51\x06\xd8\xd8\x88\xd2\x45\x18\x64\xc2\x79\x13\x30\x09\xc6\xac\x36\x6e\x5e\x47\x86\x52\xc5\x0b\xc2\x77\x38\x2e\x24\xd8\xc5\x60\xd2\x9e\x33\xe4\x2a\xa3\xee\x5c\xa2\x2b\x17\xc1\x99\x8a\x5a\xcd\x38\x74\x46\x14\xa3\x71\xbb\x8f\x65\xe5\x1d\x5b\xee\x90\xe6\x18\x0c\x37\x25\x37\xbc\xb0\x61\x5f\xb1\x1d\xb4\xe6\xa5\xd1\xff\x50\xec\x8e\xcd\xfb\x8a\xce\x3c\x15\x92\x96\x22\xd9\xb3\x6c\x64\x9d\x51\xc2\x6d\xde\x02\xf6\x83\xef\xa2\x17\x29\x1e\xaa\x15\xc5\x4e\x22\x23\x87\x5a\x18\x57\x71\x69\xc9\xd4\x22\x26\x1b\x2a\x72\xff\x69\xf3\x20\x54\x16\x0a\xeb\x84\x0e\x85\x06\x53\x58\xde\x5c\x5e\x2f\xee\x6e\x2f\xbf\x2c\x76\x7f\xf8\x8e\xcc\x50\x09\xf6\x2f\x96\x57\xd7\x97\x3f\x37\xd2\x8f\x1f\xf7\xb0\x4f\x9c\x7b\xcb\x75\x3d\x44\x56\x5b\x30\x8d\x35\x2f\x64\xef\xca\x95\xac\x08\x33\xb8\x9c\x14\x28\xce\x35\x82\xcc\x10\xa9\x60\x06\x92\x96\x1a\x91\x37\x0a\x66\x48\x45\x57\xc9\x37\x97\x72\xfb\xb8\x58\xc7\x33\xb2\x2d\xab\x9a\xfd\x28\x90\x9a\x27\x9e\x76\xc1\xb8\x53\x79\x25\x95\xb6\x2f\xf0\x84\xd0\x2a\x15\xd9\x57\x21\xe9\xd6\xe8\x5a\x24\x64\x46\x7f\x76\xb2\x91\xaf\xde\x55\x12\xf9\x7a\x3e\x15\x72\x82\x9a\x1b\xc1\x57\x92\x22\x04\x8b\x9b\x3f\x96\x5f\xaf\x7e\x59\x04\xe3\xbf\xc6\x07\xd0\xbb\x20\x07\x98\x77\x1f\xfe\xee\x7d\xf8\x95\x78\x22\x54\xd6\xb8\x80\xd4\xe8\x02\x4f\x4d\xf5\x48\x06\x0c\xf6\x10\x6d\x8e\x81\x29\xc0\x4c\x8a\x90\x54\x7d\xac\x8c\x4b\x0c\x37\xa4\xea\xb0\x75\x6b\x7b\x6c\xb8\xed\x36\x4f\xbf\xdb\x83\xfc\xad\x2a\x21\x93\x57\x93\xe7\x6f\xb4\x94\x80\x09\xdc\x07\x36\x92\xdc\x91\x75\xd1\x70\xd3\x34\xf7\x36\xba\x0f\xb0\xfc\xf2\xed\xfa\xf6\xdb\xdd\x62\xe7\xcd\x8e\x30\x83\xf7\x42\x1c\x45\xe0\x0f\x25\x3a\x7e\x20\xc3\x62\x5d\x94\xda\x12\x58\x7a\xe2\x26\xec\xc2\x78\xe6\x28\x44\xe1\xa9\x33\x78\x43\x36\x9a\xd9\x80\xd2\x50\xc9\x0d\xbd\x29\x2f\x6d\x93\xc5\x86\xb8\xa3\x53\x7d\x66\x29\x36\xe4\x90\x91\x22\x23\xe2\xbd\x96\x6a\x54\x8c\x79\x4e\x30\x52\x35\xf3\xe4\x9b\xfb\x44\x80\xb1\xc4\xac\x99\xa9\x54\xaf\xeb\xda\xcb\x78\x59\xca\xf5\xa9\xbb\x58\x0a\xf6\x7c\xde\x23\x3e\xbb\x99\xdd\x0f\x3f\xac\xf8\xcc\x4e\xfd\x64\x8a\xfa\xde\x1c\x4b\xd8\x70\xf3\x34\xc4\xb6\xd3\xcf\xbe\xca\x9d\x32\xf4\x3e\xbd\x50\xe3\x49\x4d\xc6\x0a\xad\x22\x3c\x16\xbb\xdb\xf7\x51\x27\xd9\x3b\x51\x7b\xb6\x0d\x8b\xf6\x44\x1d\xa3\x9e\x43\x3e\xc4\xce\x62\xa9\xab\xc4\x37\xa7\xe3\x42\x91\x69\x9f\x0e\xeb\xe7\x26\x8b\x0d\x25\xa4\x9c\xe0\xd2\x02\xc3\xcd\xde\xeb\x01\xc6\xfe\xd7\x8a\xc0\xad\xe0\xcc\xea\xca\xe5\xc4\xad\xbb\x60\x1c\x8c\x35\xef\x06\x86\x9b\xd3\x2f\xc8\x0b\x2c\x2c\x2b\x9b\xbf\x4a\x3d\x43\xce\xac\x47\x17\x9f\x0e\x67\x51\x3f\xa4\x86\xff\x8c\xc1\x43\x22\x8b\x4d\x28\xf4\xf4\xc0\xa3\xe9\xe9\xec\x3d\x37\x49\x00\x27\x0a\xd2\x95\x1b\xf9\x35\xc2\xe7\x4f\x13\x54\x4a\xb8\x08\xc1\xf5\xd5\xcd\xef\xbf\x2d\xee\x82\x53\x2e\x05\xbb\x19\x19\xe7\x14\xfb\xf7\x05\x39\x71\xe9\xf2\x30\x0c\x83\xf7\x0e\xac\x84\x4a\xa9\xd7\xef\xea\xcc\xa6\x59\xd2\x23\x32\x9c\x68\xa0\x17\xea\xb3\x5b\xb6\xe7\x67\x3f\x02\x00\x00\xff\xff\x1c\x7f\xb4\x10\x28\x09\x00\x00")

func templatesJenkinsTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsTemplate,
		"templates/jenkins-template",
	)
}

func templatesJenkinsTemplate() (*asset, error) {
	bytes, err := templatesJenkinsTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins-template", size: 2344, mode: os.FileMode(511), modTime: time.Unix(1542616765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/compose-dev-template": templatesComposeDevTemplate,
	"templates/compose-template": templatesComposeTemplate,
	"templates/docker-template": templatesDockerTemplate,
	"templates/jenkins-template": templatesJenkinsTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"compose-dev-template": &bintree{templatesComposeDevTemplate, map[string]*bintree{}},
		"compose-template": &bintree{templatesComposeTemplate, map[string]*bintree{}},
		"docker-template": &bintree{templatesDockerTemplate, map[string]*bintree{}},
		"jenkins-template": &bintree{templatesJenkinsTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

