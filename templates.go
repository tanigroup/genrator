// Code generated by go-bindata.
// sources:
// templates/compose-dev-template
// templates/compose-template
// templates/docker-template
// templates/jenkins-template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesComposeDevTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x6e\xc3\x20\x10\x86\x77\x4b\x7e\x87\x93\xf7\xd8\x52\x47\xb6\x28\xa1\x6d\xda\xa6\x8e\x92\x0c\xdd\x10\x31\x17\x0b\x85\x40\x74\x60\x9a\xc7\xaf\x6c\xa8\xea\xa8\x4c\xdc\xcf\xf7\xdd\x71\x11\xc9\x6b\x67\x19\x54\x4f\x55\x59\x94\x85\x47\x8a\xba\x43\xcf\xca\x02\x40\x6c\xb6\xcb\x17\x2e\x3e\x97\x5b\x3e\xd5\x00\xfa\x2a\x7b\x64\xd0\x77\x54\x6b\xd7\x88\xdd\xbe\x7d\xe3\xab\xe3\x44\x34\x73\xda\xc8\x80\x3e\x24\xe7\x34\x68\xa3\xb2\x0f\xd0\x39\x1b\xf0\x1e\x18\xd4\xbf\x89\x72\xdd\x05\xe9\xac\x0d\xb2\xd9\xdd\x37\x62\xdd\xae\xde\xf9\x5e\x3c\x6f\x3e\x52\xd7\x24\xa0\x8d\x22\xc1\x35\xda\x98\xb2\xb1\xa9\xd4\x16\x49\x58\x79\x45\x06\xd5\xec\x2f\x55\x42\xbe\x1d\x5d\xb4\xed\x85\xd2\xc4\xa0\x19\x3c\x35\x9e\xba\x46\xde\x6e\xe9\x39\x3a\x33\x5c\xf3\xda\xe3\x59\x40\xcd\xfe\x53\x37\x47\x61\xce\x54\xe2\xb5\x3d\x1c\xc5\xae\xdd\x1f\x99\xe0\x5f\xbb\xf6\xc0\xd7\x53\x95\x87\x5a\x0c\xe3\xdc\xb9\xa2\xf0\x2c\x07\x13\xfe\x82\x13\x69\xd5\xe3\x22\xa3\x65\xf1\xe0\x64\x3a\xfb\x8a\x74\x44\x62\x59\x19\xb3\x47\x39\x63\x78\x0f\x48\x56\x1a\x06\x81\x06\x2c\x8b\x9f\x00\x00\x00\xff\xff\xec\x42\x5d\x5a\xe4\x01\x00\x00")

func templatesComposeDevTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeDevTemplate,
		"templates/compose-dev-template",
	)
}

func templatesComposeDevTemplate() (*asset, error) {
	bytes, err := templatesComposeDevTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-dev-template", size: 484, mode: os.FileMode(511), modTime: time.Unix(1542274267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComposeTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4e\xc3\x30\x10\x44\xef\x91\xf2\x0f\x2b\xdf\x89\x25\x8e\xbe\x55\xad\x41\x05\x4a\xa2\xd0\x03\xb7\x95\x71\x96\x68\xd5\xd4\x8e\xd6\x6e\xe0\xf3\x11\x35\xa0\x70\xdb\x99\x7d\x33\x9a\x85\x24\x71\x0c\x06\xd4\xad\xaa\xab\xba\x4a\x24\x0b\x7b\x4a\xa6\xae\x00\x70\x7f\xd8\xdc\x5b\x7c\xde\x1c\xec\x55\x03\xf0\xd9\x8d\x64\x60\xf4\xd2\x70\xd4\xd8\xf5\xed\x83\xdd\x1e\xaf\x84\x5e\xd3\x93\xcb\x94\x72\xc9\xbc\x5d\x78\x1a\x7e\xf2\x00\x3e\x86\x4c\x9f\xd9\x40\xf3\xeb\x0c\xd1\x9f\x48\xde\x79\x22\xb3\xba\x93\xc6\x5d\xbb\x7d\xb4\x3d\xde\xed\x9f\x4a\x6b\x09\x50\x58\xb0\xc0\x0d\x85\xa5\x78\xdf\xa5\x8e\x03\x09\x06\x77\x26\x03\x6a\xb5\x45\x15\xe4\x23\xca\x89\xc3\x88\x03\x8b\x01\x7d\x49\xa2\x93\x78\xed\xe6\xb9\xbc\xe7\x28\x39\xfd\x8d\xbc\x01\x85\xf6\xb5\x6b\x5f\xec\x0e\xbb\xb6\x3f\x9a\x7f\x4a\xd5\xd5\x57\x00\x00\x00\xff\xff\xbf\x61\xfb\xaa\x37\x01\x00\x00")

func templatesComposeTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeTemplate,
		"templates/compose-template",
	)
}

func templatesComposeTemplate() (*asset, error) {
	bytes, err := templatesComposeTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-template", size: 311, mode: os.FileMode(511), modTime: time.Unix(1542274267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x88\x77\x72\x0c\x76\x8d\xf7\xf4\x75\x74\x77\xe5\xe5\xe2\xe5\x72\x8d\x08\xf0\x0f\x76\x55\x88\x87\xd0\x2e\xf1\x01\xfe\x41\x21\x80\x00\x00\x00\xff\xff\x6a\xb8\xec\x2a\x28\x00\x00\x00")

func templatesDockerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerTemplate,
		"templates/docker-template",
	)
}

func templatesDockerTemplate() (*asset, error) {
	bytes, err := templatesDockerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-template", size: 40, mode: os.FileMode(511), modTime: time.Unix(1539084282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xc1\x6e\xe3\x36\x10\x86\xef\x01\xf2\x0e\xff\xba\xc6\xca\x01\x42\x79\xb3\x47\x19\x3e\x04\x0b\x6f\x11\xa0\xc9\x06\x4d\xdb\x4b\xd3\x0a\xb4\x34\x92\xd8\x50\xa4\x4a\x52\x2a\x0c\xaf\xdf\xbd\xa0\x22\x45\x72\x9c\x6c\x92\x43\x7c\x91\x38\x33\x1c\xfd\x43\x7e\x33\xfe\xe9\xc3\xbc\xb6\x66\xbe\x16\x6a\x4e\xaa\x41\x6e\xb4\x6e\x36\xc7\x47\xc7\x47\x95\xa8\x48\x0a\x45\xd8\x1e\x1f\x01\x3c\x27\xe5\xb0\x85\xe4\x6b\x92\x08\x4a\x6e\x1d\x99\x00\x3b\xef\x23\xd5\x08\xa3\x55\xd9\x46\x78\x03\xe0\x78\x1e\x37\x64\xb0\x84\x2d\x30\xbb\xb7\x01\x36\x31\xa2\x72\x11\x26\xb9\x70\x3e\x04\x4c\x82\x31\xab\x8d\x5b\x36\x91\xa1\x4c\xf1\x92\xf0\x1d\x8e\x0b\x09\x76\x36\x39\xed\xf7\x19\x72\xb5\x51\x37\x2e\xd5\xb5\x8b\xe0\x4c\x4d\xbd\xe7\x24\x74\x46\x94\xb3\x93\x7e\x9d\xc8\xda\x0b\x8b\xdb\x4c\x4b\x4c\xa6\xdb\x8a\x1b\x5e\xda\x70\xec\xd8\x4d\xfa\xf0\xca\xe8\x7f\x28\x71\x87\xe1\x63\xc7\x10\x9e\x09\x49\xb1\x48\xf7\x22\x3b\xdb\x10\x94\x72\x5b\xf4\x09\xc7\xc5\x0f\xd5\x8b\x0c\x77\xf5\x9a\x12\x27\x91\x93\x43\x23\x8c\xab\xb9\xb4\x64\x1a\x91\x90\x0d\x15\xb9\xff\xb4\xb9\x13\x2a\x0f\x85\x75\x42\x87\x42\x83\x29\xc4\x57\xe7\x97\xab\x9b\xeb\xf3\x2f\xab\xf6\x0d\x8c\x75\x35\x21\xbf\xa3\x78\xba\xdd\x93\x1c\x73\x2b\x38\xb3\xba\x76\x05\x71\xeb\xce\x18\x8f\xa7\xdb\xbd\x33\xc0\x77\xe4\x86\x2a\xb0\x7f\x11\x5f\x5c\x9e\xff\xdc\x65\xfd\xf8\x71\x4f\xdb\x3b\x7c\xf7\x35\xe5\x8e\x14\xb1\xc6\x82\x69\x6c\x78\x29\x47\x92\xd7\xb2\x26\x2c\xe0\x0a\x52\xa0\xa4\xd0\x08\x72\x43\xa4\x82\x05\x48\x5a\xea\x4c\x3e\x28\x58\x20\x13\x03\x49\xaf\x46\x69\x77\xff\xb0\x8e\xe7\x64\x7b\xaa\xbb\xf5\x2c\x90\x9a\xa7\x1e\xfb\xe0\x64\x70\x79\x27\x55\x76\x6c\xf0\x40\x6a\x95\x89\xfc\xab\x90\x74\x6d\x74\x23\x52\x32\xb3\x3f\x07\xdb\xcc\xd3\x73\x91\x46\x9e\xa7\x07\x90\x4e\xd1\x70\x23\xf8\x5a\x52\x84\x60\x75\xf5\x47\xfc\xf5\xe2\x97\x55\x70\xf2\xd7\xc9\xa3\xd4\x6d\x91\x13\x2c\x87\x1f\xfe\x1e\xfd\xf0\x2b\xf1\x54\xa8\xbc\x93\x80\xcc\xe8\x12\x0f\x4d\x7d\x0f\x23\x26\x7b\x19\x6d\x81\x89\x29\xc1\x4c\x86\x90\x54\x73\xe8\x4c\x2a\x4c\xb7\xa4\x9a\xb0\x97\xb5\x3b\x0c\xdc\x0d\x8b\x87\xd7\xdd\xa3\xf3\x5b\xd7\x42\xa6\x2f\x1e\x9e\xff\xa2\xa5\x14\x4c\xe0\x36\xb0\x91\xe4\x8e\xac\x8b\xa6\xdb\x6e\xb8\xec\xa2\xdb\x00\xf1\x97\x6f\x97\xd7\xdf\x6e\x56\xad\x9a\x16\x98\xc9\x5b\x53\x1c\x54\xe0\x37\xa5\x3a\xb9\x23\xc3\x12\x5d\x56\xda\x12\x58\xf6\xc4\x97\xd0\x96\xf1\xcc\x56\x88\xd2\xa3\x33\x79\xc5\x69\xf4\xfd\x54\x19\xaa\xb8\xa1\x57\x9d\x4b\xdf\xa4\x89\x21\xee\xe8\x3d\xfa\xd4\x52\x62\xc8\x21\x27\x45\x46\x24\x7b\x2d\xd9\xb9\x18\xf3\x4c\x31\x52\x0d\xf3\xf0\x2e\xfd\x41\x82\xb1\xd4\x6c\x98\xa9\xd5\xa8\x6b\x7b\xb1\xbc\xaa\xe4\xe6\x3d\xb4\xb2\x0c\xec\xf9\x7b\x8f\xf8\xe2\x6a\x71\x3b\xfd\xb0\xe6\x0b\x3b\xf7\x1b\xa2\x71\x35\x87\x16\x36\xdd\x3e\x0c\xf1\xdd\xfc\xb3\xa7\x6c\x70\x86\xbe\xa6\x1f\x30\x76\xda\x90\xb1\x42\xab\x08\xf7\xb0\x0d\xeb\x71\xd6\xd3\xfc\x8d\x59\x47\xb1\x1d\xc5\x7b\xa6\x81\xe8\x97\x32\x3f\x4b\x61\x55\xdb\xe2\x45\xf4\x0c\x39\xb3\x99\x9d\x7d\x7a\x3c\x8b\x5a\xb9\x79\x22\x75\x9d\xa2\xe3\x9f\x31\xf8\x94\xc8\x13\x13\x0a\x3d\x7f\x74\xa9\xf3\xa7\xd5\x3f\x37\x49\x00\x27\x4a\xd2\xb5\x9b\xf9\x67\x84\xcf\x9f\x4e\x51\x2b\xe1\x22\x04\x97\x17\x57\xbf\xff\xb6\xba\x09\x9e\x92\x14\xb4\x33\x32\x29\x28\xf1\xff\x2f\x28\x88\x4b\x57\x84\x61\x18\xbc\x75\x60\xa5\x54\x49\xbd\x79\x53\x67\x76\xb0\x67\x07\x97\xf1\x0e\x0d\xf0\x83\xfb\x6d\x1f\xbb\xe3\xa3\xff\x03\x00\x00\xff\xff\xf7\x00\xf2\xdc\xe8\x09\x00\x00")

func templatesJenkinsTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsTemplate,
		"templates/jenkins-template",
	)
}

func templatesJenkinsTemplate() (*asset, error) {
	bytes, err := templatesJenkinsTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins-template", size: 2536, mode: os.FileMode(511), modTime: time.Unix(1542783497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/compose-dev-template": templatesComposeDevTemplate,
	"templates/compose-template": templatesComposeTemplate,
	"templates/docker-template": templatesDockerTemplate,
	"templates/jenkins-template": templatesJenkinsTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"compose-dev-template": &bintree{templatesComposeDevTemplate, map[string]*bintree{}},
		"compose-template": &bintree{templatesComposeTemplate, map[string]*bintree{}},
		"docker-template": &bintree{templatesDockerTemplate, map[string]*bintree{}},
		"jenkins-template": &bintree{templatesJenkinsTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

