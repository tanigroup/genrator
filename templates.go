// Code generated by go-bindata.
// sources:
// templates/compose-dev-template
// templates/compose-template
// templates/docker-template
// templates/jenkins-template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesComposeDevTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x6e\xc3\x20\x10\x86\x77\x4b\x7e\x87\x93\xf7\xd8\x52\x47\xb6\x28\xa1\x6d\xda\xa6\x8e\x92\x0c\xdd\x10\x31\x17\x0b\x85\x40\x74\x60\x9a\xc7\xaf\x6c\xa8\xea\xa8\x4c\xdc\xcf\xf7\xdd\x71\x11\xc9\x6b\x67\x19\x54\x4f\x55\x59\x94\x85\x47\x8a\xba\x43\xcf\xca\x02\x40\x6c\xb6\xcb\x17\x2e\x3e\x97\x5b\x3e\xd5\x00\xfa\x2a\x7b\x64\xd0\x77\x54\x6b\xd7\x88\xdd\xbe\x7d\xe3\xab\xe3\x44\x34\x73\xda\xc8\x80\x3e\x24\xe7\x34\x68\xa3\xb2\x0f\xd0\x39\x1b\xf0\x1e\x18\xd4\xbf\x89\x72\xdd\x05\xe9\xac\x0d\xb2\xd9\xdd\x37\x62\xdd\xae\xde\xf9\x5e\x3c\x6f\x3e\x52\xd7\x24\xa0\x8d\x22\xc1\x35\xda\x98\xb2\xb1\xa9\xd4\x16\x49\x58\x79\x45\x06\xd5\xec\x2f\x55\x42\xbe\x1d\x5d\xb4\xed\x85\xd2\xc4\xa0\x19\x3c\x35\x9e\xba\x46\xde\x6e\xe9\x39\x3a\x33\x5c\xf3\xda\xe3\x59\x40\xcd\xfe\x53\x37\x47\x61\xce\x54\xe2\xb5\x3d\x1c\xc5\xae\xdd\x1f\x99\xe0\x5f\xbb\xf6\xc0\xd7\x53\x95\x87\x5a\x0c\xe3\xdc\xb9\xa2\xf0\x2c\x07\x13\xfe\x82\x13\x69\xd5\xe3\x22\xa3\x65\xf1\xe0\x64\x3a\xfb\x8a\x74\x44\x62\x59\x19\xb3\x47\x39\x63\x78\x0f\x48\x56\x1a\x06\x81\x06\x2c\x8b\x9f\x00\x00\x00\xff\xff\xec\x42\x5d\x5a\xe4\x01\x00\x00")

func templatesComposeDevTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeDevTemplate,
		"templates/compose-dev-template",
	)
}

func templatesComposeDevTemplate() (*asset, error) {
	bytes, err := templatesComposeDevTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-dev-template", size: 484, mode: os.FileMode(511), modTime: time.Unix(1542273655, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComposeTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4e\xc3\x30\x10\x44\xef\x91\xf2\x0f\x2b\xdf\x89\x25\x8e\xbe\x55\xad\x41\x05\x4a\xa2\xd0\x03\xb7\x95\x71\x96\x68\xd5\xd4\x8e\xd6\x6e\xe0\xf3\x11\x35\xa0\x70\xdb\x99\x7d\x33\x9a\x85\x24\x71\x0c\x06\xd4\xad\xaa\xab\xba\x4a\x24\x0b\x7b\x4a\xa6\xae\x00\x70\x7f\xd8\xdc\x5b\x7c\xde\x1c\xec\x55\x03\xf0\xd9\x8d\x64\x60\xf4\xd2\x70\xd4\xd8\xf5\xed\x83\xdd\x1e\xaf\x84\x5e\xd3\x93\xcb\x94\x72\xc9\xbc\x5d\x78\x1a\x7e\xf2\x00\x3e\x86\x4c\x9f\xd9\x40\xf3\xeb\x0c\xd1\x9f\x48\xde\x79\x22\xb3\xba\x93\xc6\x5d\xbb\x7d\xb4\x3d\xde\xed\x9f\x4a\x6b\x09\x50\x58\xb0\xc0\x0d\x85\xa5\x78\xdf\xa5\x8e\x03\x09\x06\x77\x26\x03\x6a\xb5\x45\x15\xe4\x23\xca\x89\xc3\x88\x03\x8b\x01\x7d\x49\xa2\x93\x78\xed\xe6\xb9\xbc\xe7\x28\x39\xfd\x8d\xbc\x01\x85\xf6\xb5\x6b\x5f\xec\x0e\xbb\xb6\x3f\x9a\x7f\x4a\xd5\xd5\x57\x00\x00\x00\xff\xff\xbf\x61\xfb\xaa\x37\x01\x00\x00")

func templatesComposeTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeTemplate,
		"templates/compose-template",
	)
}

func templatesComposeTemplate() (*asset, error) {
	bytes, err := templatesComposeTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-template", size: 311, mode: os.FileMode(511), modTime: time.Unix(1542273669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x88\x77\x72\x0c\x76\x8d\xf7\xf4\x75\x74\x77\xe5\xe5\xe2\xe5\x72\x8d\x08\xf0\x0f\x76\x55\x88\x87\xd0\x2e\xf1\x01\xfe\x41\x21\x80\x00\x00\x00\xff\xff\x6a\xb8\xec\x2a\x28\x00\x00\x00")

func templatesDockerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerTemplate,
		"templates/docker-template",
	)
}

func templatesDockerTemplate() (*asset, error) {
	bytes, err := templatesDockerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-template", size: 40, mode: os.FileMode(511), modTime: time.Unix(1539084282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xd1\x6f\xe2\xb8\x13\x7e\xaf\xd4\xff\xe1\x5b\x7e\xfc\x14\x90\x6a\x68\xfb\x18\xc4\x43\x77\x8f\x3d\x21\x2d\x6c\xb5\xbd\xde\xcb\x76\x0f\x99\x64\x92\xf8\xea\xd8\x39\xdb\x89\xc4\xb1\xf9\xdf\x4f\x86\xd0\x50\xa0\xdd\x96\x97\xe0\x99\xf1\x78\xe6\x9b\x6f\xbe\xff\x7d\x18\x96\xd6\x0c\x97\x42\x0d\x49\x55\x48\x8d\xd6\xd5\xea\xfc\xec\xfc\xac\x10\x05\x49\xa1\x08\xeb\xf3\x33\x80\xa7\xa4\x1c\xd6\x90\x7c\x49\x12\x41\xce\xad\x23\x13\xa0\xf6\x3e\x52\x95\x30\x5a\xe5\x9b\x08\x6f\x00\x1c\x4f\x17\x15\x19\x8c\x61\x33\xf4\xb6\x36\xc0\x46\x46\x14\x2e\x44\x27\x15\xce\x87\x80\x49\x30\x66\xb5\x71\xe3\x2a\x34\x94\x28\x9e\x13\x7e\xc2\x71\x21\xc1\xae\x3a\x17\xbb\x7b\x86\x5c\x69\xd4\x9d\x8b\x75\xe9\x42\x38\x53\xd2\xce\xd3\x1f\x38\x23\xf2\x5e\x7f\x77\x8e\x64\xe9\x0b\x5b\x6c\x32\x8d\xd1\xe9\xae\x0b\x6e\x78\x6e\x07\xfb\x8e\xba\xb3\x0b\x2f\x8c\xfe\x9b\x22\x77\x1c\xbe\xef\x68\xc3\x13\x21\x69\x21\xe2\x67\x91\x8d\xad\x0d\x8a\xb9\xcd\x76\x09\xf7\x9b\x6f\xbb\x17\x09\xbe\xe3\xa1\xdb\xeb\x75\xd7\x1f\xef\xa7\x5f\x7e\x5b\xcc\xef\x67\x1f\x27\xdf\xea\xff\x5f\xf7\xfb\x60\xf4\x0f\x2e\xf1\x03\x23\xb8\x8c\x14\x28\xca\x34\x82\xd4\x10\xa9\x60\x04\x92\x96\x1a\xd3\x52\x96\x14\x8c\x90\x88\x16\xa6\x37\xe3\x54\x6f\x3f\xd6\xf1\x94\xec\x6e\x64\xcd\xb9\x17\x48\xcd\x63\x3f\xd3\xa0\xdf\xba\xbc\x93\x0a\xbb\x6f\xf0\x68\x6b\x95\x88\xf4\xb3\x90\x74\x6b\x74\x25\x62\x32\xbd\xef\xad\xad\xe7\xa1\x99\xc6\xa1\x07\xeb\x09\xa5\x0b\x54\xdc\x08\xbe\x94\x14\x22\x98\xcc\xff\x5c\x7c\x9e\x7e\x99\x04\xfd\x1f\xfd\x83\xd4\x9b\x26\x3b\x18\xb7\x3f\xfc\xb5\xf7\xc3\x37\xe2\xb1\x50\x69\x53\x02\x12\xa3\x73\x3c\x31\x76\x8b\x34\x3a\xcf\x32\xda\x0c\x1d\x93\x83\x99\x04\x03\x52\xd5\xb1\x33\x2a\xd0\x5d\x93\xaa\x06\xbb\xb2\xea\xe3\xc0\xba\x3d\x3c\xfd\xad\x0f\xf0\x5b\x96\x42\xc6\xbf\x04\xcf\xbf\x68\x29\x06\x13\x78\x08\x6c\x28\xb9\x23\xeb\xc2\xee\xba\xd9\x9c\x3a\x7c\x08\xb0\xf8\xf4\x75\x76\xfb\xf5\x6e\xb2\xa9\x66\x31\xbf\x99\x4d\x3a\xef\x4d\x71\xd4\x81\xbf\x14\xeb\xe8\x91\x0c\x8b\x74\x5e\x68\x4b\x60\xc9\x89\x97\xb0\x69\xe3\x85\xab\x10\xb9\xa7\x4e\xe7\x0d\x68\x34\x8b\x87\xc2\x50\xc1\x0d\xbd\x09\x97\xc7\x72\x49\x91\x93\x88\x0c\x71\x47\x60\x0a\x9b\x92\xee\x6e\x6f\x3e\x35\xc5\x59\x8a\x0c\x39\xa4\xa4\xc8\x88\x08\x8b\xe9\xec\xe6\xf7\xad\x8b\x35\x2e\xc6\x3c\x27\x18\xa9\x8a\x79\xf2\x8d\x3d\x10\x60\x2c\x36\x2b\x66\x4a\x05\xa6\xb1\xe2\xb9\xc4\x4f\xec\x1e\xe3\x45\x21\x57\xa7\xde\x62\x09\xd8\xcb\xb8\x87\x7c\x34\x1f\x3d\x74\x3f\x2c\xf9\xc8\x0e\xfd\xda\x87\xfb\xd5\x1c\x5b\x58\x77\xfd\xa4\x10\xf5\xf0\xda\x4f\xb9\x75\x0e\x7c\x4d\xaf\xcc\xf8\xa2\x22\x63\x85\x56\x21\xb6\xc3\x6e\xcf\xfb\x59\x2f\xd2\x77\x66\xdd\x8b\x6d\x58\xf4\xcc\xd4\x32\xea\xa5\xcc\x87\xb9\xd3\x48\xea\x32\xf6\xcb\xe9\xb8\x50\x64\x76\xba\x6c\x91\x92\x63\x91\xa1\x98\x94\x13\x5c\x5a\xa0\xbb\x7e\x26\xcd\x60\xec\x5f\xad\x08\xdc\x0a\xce\xac\x2e\x5d\x46\xdc\xba\x2b\xc6\xc1\x58\x23\xca\xe8\xae\x4f\xcb\xf3\x2b\x2c\x2c\x4a\x9b\xfd\x92\x7a\x86\x9c\x59\xf5\xae\x2e\x0f\xb5\x68\xbf\xa5\x86\xff\x8c\xc1\xa7\x44\x1a\x99\x81\xd0\xc3\x83\x8a\x86\xa7\xd1\x7b\x49\x49\x00\x27\x72\xd2\xa5\xeb\xf9\x6f\x88\xeb\xcb\x0b\x94\x4a\xb8\x10\xc1\x6c\x3a\xbf\xff\x63\x72\x17\x9c\x2a\x29\xd8\x68\x64\x94\x51\xf4\xe8\x95\x30\x23\x2e\x5d\x36\x18\x0c\x82\xf7\x0a\x56\x4c\x85\xd4\xab\x77\x6d\x66\xb3\x2c\xc9\x11\x19\x4e\x2c\xd0\x2b\xf3\xd9\x7c\xea\xf3\xb3\xff\x02\x00\x00\xff\xff\x99\x62\xcc\x85\x85\x08\x00\x00")

func templatesJenkinsTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsTemplate,
		"templates/jenkins-template",
	)
}

func templatesJenkinsTemplate() (*asset, error) {
	bytes, err := templatesJenkinsTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins-template", size: 2181, mode: os.FileMode(511), modTime: time.Unix(1542272108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/compose-dev-template": templatesComposeDevTemplate,
	"templates/compose-template": templatesComposeTemplate,
	"templates/docker-template": templatesDockerTemplate,
	"templates/jenkins-template": templatesJenkinsTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"compose-dev-template": &bintree{templatesComposeDevTemplate, map[string]*bintree{}},
		"compose-template": &bintree{templatesComposeTemplate, map[string]*bintree{}},
		"docker-template": &bintree{templatesDockerTemplate, map[string]*bintree{}},
		"jenkins-template": &bintree{templatesJenkinsTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

