// Code generated by go-bindata.
// sources:
// templates/compose-dev-template
// templates/compose-template
// templates/docker-template
// templates/jenkins-template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesComposeDevTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x6e\xc3\x20\x10\x86\x77\x4b\x7e\x87\x93\xf7\xd8\x52\x47\xb6\x28\xa1\x6d\xda\xa6\x8e\x92\x0c\xdd\x10\x31\x17\x0b\x85\x40\x75\x60\x9a\xc7\xaf\x6c\xa8\x6a\x33\x71\xff\x7d\xdf\x1d\x44\x24\xaf\x9d\x65\x50\x3d\x55\x65\x51\x16\x1e\x29\xea\x0e\x3d\x2b\x0b\x00\xb1\xdb\xaf\x5f\xb8\xf8\x5c\xef\xf9\x54\x03\xe8\xbb\xec\x91\x41\xdf\x51\xad\x5d\x23\x0e\xc7\xf6\x8d\x6f\xce\x13\xd1\xcc\x69\x23\x03\xfa\x90\x9c\xcb\xa0\x8d\xca\x3e\x40\xe7\x6c\xc0\x47\x60\x50\xff\x25\xca\x75\x37\xa4\xab\x36\xc8\x66\x77\xdf\x88\x6d\xbb\x79\xe7\x47\xf1\xbc\xfb\x48\x53\x93\x80\x36\x8a\x04\xd7\x68\x63\xca\xc6\xa1\x52\x5b\x24\x61\xe5\x1d\x19\x54\xb3\xb7\x54\x09\xf9\x71\x74\xd3\xb6\x17\x4a\x13\x83\x66\xf0\xd4\x78\xea\x52\x2b\x3a\x33\xdc\xf3\x97\xc7\xb3\x82\x9a\x2d\x89\x6f\x47\x61\xde\xaf\xc4\x6b\x7b\x3a\x8b\x43\x7b\x3c\x33\xc1\xbf\x0e\xed\x89\x6f\xa7\x2a\x2f\xb3\x18\xc6\x7d\x73\x45\xe1\x55\x0e\x26\xfc\x07\x17\xd2\xaa\xc7\x55\x46\xcb\x62\xe1\x64\x3a\xfb\x8a\x74\x44\x62\x59\x19\xb3\xa5\x9c\x31\x7c\x04\x24\x2b\x0d\x83\x40\x03\x96\xc5\x6f\x00\x00\x00\xff\xff\x0f\xc8\x09\xf1\xdc\x01\x00\x00")

func templatesComposeDevTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeDevTemplate,
		"templates/compose-dev-template",
	)
}

func templatesComposeDevTemplate() (*asset, error) {
	bytes, err := templatesComposeDevTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-dev-template", size: 476, mode: os.FileMode(511), modTime: time.Unix(1533807499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComposeTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4e\xc3\x30\x10\x44\xef\x91\xf2\x0f\x2b\xdf\x89\x25\x8e\xbe\x55\xad\x41\x05\x4a\xa2\xd0\x03\xb7\x55\x70\x96\x68\xd5\xd4\x46\x6b\xd7\xf0\xf9\x88\x18\x50\x7a\xdb\x99\x7d\x33\x9a\x4c\x12\x39\x78\x03\xea\x56\xd5\x55\x5d\x45\x92\xcc\x8e\xa2\xa9\x2b\x00\xdc\x1f\x36\xf7\x16\x9f\x37\x07\xbb\x68\x00\x3e\x0f\x13\x19\x98\x9c\x34\x1c\x34\x76\x7d\xfb\x60\xb7\xc7\x85\xd0\x6b\x7a\x1e\x12\xc5\x54\x32\x6f\x17\x9e\xc7\xdf\x3c\x80\x0b\x3e\xd1\x57\x32\xd0\xfc\x39\x63\x70\x27\x92\x77\x9e\xc9\xac\xee\xa8\x71\xd7\x6e\x1f\x6d\x8f\x77\xfb\xa7\xd2\x5a\x02\xe4\x33\x16\xb8\x21\x9f\x8b\xf7\x53\x3a\xb0\x27\x41\x3f\x9c\xc9\x80\x5a\x6d\x51\x05\xf9\x0c\x72\x62\x3f\xe1\xc8\x62\x40\x5f\xa2\xe8\x28\xae\xbc\x3e\x82\xa4\xf8\x3f\xf0\x06\x14\xda\xd7\xae\x7d\xb1\x3b\xec\xda\xfe\x68\xae\x94\xaa\xab\xef\x00\x00\x00\xff\xff\x89\x49\x75\x0f\x33\x01\x00\x00")

func templatesComposeTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeTemplate,
		"templates/compose-template",
	)
}

func templatesComposeTemplate() (*asset, error) {
	bytes, err := templatesComposeTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-template", size: 307, mode: os.FileMode(511), modTime: time.Unix(1533807666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x88\x77\x72\x0c\x76\x8d\xf7\xf4\x75\x74\x77\xe5\xe5\xe2\xe5\x72\x8d\x08\xf0\x0f\x76\x55\x88\x87\xd0\x2e\xf1\x01\xfe\x41\x21\x80\x00\x00\x00\xff\xff\x6a\xb8\xec\x2a\x28\x00\x00\x00")

func templatesDockerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerTemplate,
		"templates/docker-template",
	)
}

func templatesDockerTemplate() (*asset, error) {
	bytes, err := templatesDockerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-template", size: 40, mode: os.FileMode(511), modTime: time.Unix(1533807499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x6f\xe3\x36\x10\x3d\x37\x40\xfe\xc3\x54\x35\x40\x1b\x08\xe5\x4d\x8f\x02\x72\x58\xb4\xde\x22\x40\xf3\x81\xcd\xb6\x28\x50\xb7\x06\x4d\x8d\x25\x36\x14\xc9\x92\x23\x01\xae\x57\xff\xbd\xa0\x2c\xc5\x8a\x9d\x34\xbb\xa8\x2e\xfc\x98\xc7\xc7\xc7\xc7\xe1\xe8\xbb\x6f\xe7\x75\xf0\xf3\xb5\x32\x73\x34\x0d\x14\xde\xda\x66\x7b\x7e\x76\x7e\xe6\x94\x43\xad\x0c\xc2\xee\xfc\x0c\x40\x14\x68\x08\x76\xa0\xc5\x1a\x35\xb0\x4a\x04\x42\xcf\xa0\x8d\x31\x34\x8d\xf2\xd6\x54\x1d\x22\x4e\x00\x90\x28\x56\x0d\x7a\xb8\x82\x50\xc2\x74\x3f\x07\x10\xa4\x57\x8e\x32\x48\x0a\x45\x11\x02\x5c\x03\xe7\xc1\x7a\xba\x6a\x32\x8f\x1b\x23\x2a\x84\xcf\x40\x42\x69\xe0\x97\xc9\xc5\xb0\xce\x23\xd5\xde\x3c\x50\x6e\x6b\xca\x80\x7c\x8d\x43\x64\x96\x92\x57\xd5\x74\x36\x8c\xa5\xae\xa3\xb0\x55\xc7\x74\x05\xc9\x64\xe7\x84\x17\x55\x48\xc7\x81\x36\x19\xe0\xce\xdb\xbf\x50\xd2\x29\x7c\x1c\x38\xc0\x37\x4a\xe3\x4a\xe5\xcf\x90\xfd\xdc\x00\x6a\xf7\x4d\x20\x51\x60\x18\xdc\xe8\xc7\x53\xa6\xad\xc8\xa3\x5d\x6c\x76\x08\xc5\x20\xba\x30\x9e\x88\x07\xb1\x66\xa3\x8a\x0f\x4a\xe3\xbd\xb7\x8d\xca\xd1\x4f\x7f\x3f\xcc\x4d\xe3\xae\xd7\x79\x16\x75\x3c\x09\xb8\x80\x46\x78\x25\xd6\x1a\x33\x60\x8b\xdb\x5f\x57\x1f\xae\x7f\x5e\xb0\xd9\x1f\xb3\x23\x6a\x94\xa5\x85\x04\xae\x0e\x1f\xfc\x39\xfa\xe0\x23\x8a\x5c\x99\xa2\x97\x00\x1b\x6f\x2b\x78\x4a\x86\xfd\x15\x42\xf2\x8c\x31\x94\x90\xf8\x0a\xb8\xdf\x40\x8a\xa6\x39\x0d\x4a\x07\x93\x1d\x9a\x26\x1d\x64\xb5\xa7\xc0\xf6\x30\x78\xea\xb6\x47\xfe\xad\x6b\xa5\xf3\x37\xcd\x8b\x3b\x06\xcc\x81\x2b\x58\xb2\x90\x69\x41\x18\x28\x9b\xec\xfa\xa4\x6c\xb3\x25\x83\xd5\x0f\x77\x37\xf7\x77\x0f\x8b\x4e\xcd\xea\xf6\xfd\xcd\x22\x39\xa6\xc8\xad\x7c\x44\xcf\xa5\xad\x9c\x0d\x08\x7c\xf3\xc2\x22\xe8\x14\xbd\xb2\x14\x54\x15\xb3\x20\xf9\x82\x83\x3d\xee\x37\xf9\xa2\xa3\xf5\xd8\x78\x3f\x0d\x7a\x7a\x59\xd8\x89\xa4\x91\x21\xca\xa6\x3d\x47\x1a\xd0\x37\x4a\x62\x26\x9c\xeb\x5c\xb9\xbe\x79\xff\xd3\x9e\x80\xe7\xe8\xb4\xdd\xc6\x47\x9d\x6e\x45\xa5\xff\x3f\x61\x1f\x7a\x93\x6d\x99\xac\x16\xbf\xc5\xd3\xfc\xb8\xba\xbf\xfb\xf8\x69\x99\x64\xcb\xa4\x24\x72\xb1\xf3\x15\x8c\x85\xd4\xb6\xce\xa3\x4b\x24\x94\x41\x3f\xd4\x86\x00\x05\x12\x97\x1e\x73\x34\xa4\x84\x0e\x00\x93\xdd\xb3\xf2\x00\x9c\xff\x63\x0d\x82\x08\x4a\xf0\x60\x6b\x2a\x51\x04\xba\xe4\x02\x38\xef\x0b\x03\x4c\x76\x2f\x97\x88\xff\xb8\x63\x57\x87\xf2\xcd\x0b\xf6\x48\x7e\x3b\xbd\x7c\x77\xfc\x68\xc7\x47\xea\xb3\x8b\x73\x88\x94\x50\x48\x9f\x2a\x3b\x3f\x52\x34\x1f\x19\x35\xca\xfd\xd7\x9e\x1c\x00\xa9\x0a\x6d\x4d\xd3\xd8\x66\xf0\xfd\xbb\x0b\xa8\x8d\xa2\x0c\xd8\xcd\xf5\xed\x2f\x9f\x16\x0f\xec\x25\x49\xac\x2b\x26\xb2\x44\xf9\x18\x4b\x46\x89\x42\x53\x99\xa6\x29\xfb\xda\x97\xbd\xcf\xb6\x57\xec\xf9\x66\xbf\x17\x63\x5d\x57\x6d\xba\xe6\xb1\x5e\xa3\x24\x1d\x6f\x13\x42\x23\xe1\x33\x14\x1e\x1d\xf0\xbf\xc7\x29\xd2\x21\xa9\x44\x03\x63\x41\xc3\x52\xe1\x9c\xde\x76\xef\xe7\xf5\xbc\xef\x18\x50\x07\x7c\xb6\x29\x48\x8f\x82\xf0\x8d\xb5\xc7\xe1\x71\xbe\x76\x74\x1b\xd5\x35\x8c\xb1\xbd\xb0\x13\x77\xda\xd1\x5f\xa5\x3d\x3f\xfb\x37\x00\x00\xff\xff\xcd\x44\x28\x06\xad\x07\x00\x00")

func templatesJenkinsTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsTemplate,
		"templates/jenkins-template",
	)
}

func templatesJenkinsTemplate() (*asset, error) {
	bytes, err := templatesJenkinsTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins-template", size: 1965, mode: os.FileMode(511), modTime: time.Unix(1533809178, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/compose-dev-template": templatesComposeDevTemplate,
	"templates/compose-template": templatesComposeTemplate,
	"templates/docker-template": templatesDockerTemplate,
	"templates/jenkins-template": templatesJenkinsTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"compose-dev-template": &bintree{templatesComposeDevTemplate, map[string]*bintree{}},
		"compose-template": &bintree{templatesComposeTemplate, map[string]*bintree{}},
		"docker-template": &bintree{templatesDockerTemplate, map[string]*bintree{}},
		"jenkins-template": &bintree{templatesJenkinsTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

