// Code generated by go-bindata.
// sources:
// templates/compose-dev-template
// templates/compose-template
// templates/docker-template
// templates/jenkins-template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesComposeDevTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x6e\xc3\x20\x10\x86\x77\x4b\x7e\x87\x93\xf7\xd8\x52\x47\xb6\x28\xa1\x6d\xda\xa6\x8e\x92\x0c\xdd\x10\x31\x17\x0b\x85\x40\x75\x60\x9a\xc7\xaf\x6c\xa8\x6a\x33\x71\xff\x7d\xdf\x1d\x44\x24\xaf\x9d\x65\x50\x3d\x55\x65\x51\x16\x1e\x29\xea\x0e\x3d\x2b\x0b\x00\xb1\xdb\xaf\x5f\xb8\xf8\x5c\xef\xf9\x54\x03\xe8\xbb\xec\x91\x41\xdf\x51\xad\x5d\x23\x0e\xc7\xf6\x8d\x6f\xce\x13\xd1\xcc\x69\x23\x03\xfa\x90\x9c\xcb\xa0\x8d\xca\x3e\x40\xe7\x6c\xc0\x47\x60\x50\xff\x25\xca\x75\x37\xa4\xab\x36\xc8\x66\x77\xdf\x88\x6d\xbb\x79\xe7\x47\xf1\xbc\xfb\x48\x53\x93\x80\x36\x8a\x04\xd7\x68\x63\xca\xc6\xa1\x52\x5b\x24\x61\xe5\x1d\x19\x54\xb3\xb7\x54\x09\xf9\x71\x74\xd3\xb6\x17\x4a\x13\x83\x66\xf0\xd4\x78\xea\x52\x2b\x3a\x33\xdc\xf3\x97\xc7\xb3\x82\x9a\x2d\x89\x6f\x47\x61\xde\xaf\xc4\x6b\x7b\x3a\x8b\x43\x7b\x3c\x33\xc1\xbf\x0e\xed\x89\x6f\xa7\x2a\x2f\xb3\x18\xc6\x7d\x73\x45\xe1\x55\x0e\x26\xfc\x07\x17\xd2\xaa\xc7\x55\x46\xcb\x62\xe1\x64\x3a\xfb\x8a\x74\x44\x62\x59\x19\xb3\xa5\x9c\x31\x7c\x04\x24\x2b\x0d\x83\x40\x03\x96\xc5\x6f\x00\x00\x00\xff\xff\x0f\xc8\x09\xf1\xdc\x01\x00\x00")

func templatesComposeDevTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeDevTemplate,
		"templates/compose-dev-template",
	)
}

func templatesComposeDevTemplate() (*asset, error) {
	bytes, err := templatesComposeDevTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-dev-template", size: 476, mode: os.FileMode(511), modTime: time.Unix(1531473494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComposeTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x4f\xc4\x20\x14\x84\xef\x4d\xfa\x1f\x5e\xb8\xdb\x26\x1e\xb9\x6d\x76\x51\x57\x5d\x69\xba\x3d\x78\x7b\xa9\xf4\xd9\x90\x6d\xc1\x3c\x28\xfa\xf3\xcd\x96\x35\xa9\x9c\x98\x99\x6f\x26\x90\x88\x83\xf5\x4e\x82\xb8\x17\x65\x51\x16\x81\x38\x59\x43\x41\x96\x05\x00\x1e\x4f\xbb\x47\x85\x6f\xbb\x93\x5a\x35\x80\x9d\xfb\x91\x24\x8c\x86\x2b\xeb\x6b\x6c\x5a\xfd\xac\xf6\xdd\x4a\xd4\x5b\x7a\xea\x23\x85\x98\x3b\x1f\x8b\x9d\x86\x5b\x1f\xc0\x78\x17\xe9\x27\x4a\xa8\xfe\x9c\xc1\x9b\x0b\xf1\xa7\x9d\x48\x6e\xee\xa1\xc6\x83\xde\xbf\xa8\x16\x1f\x8e\xaf\x79\x35\x17\xc8\x25\xcc\x70\x45\x2e\x65\xef\x3a\xda\x5b\x47\x8c\xae\x9f\x49\x82\xd8\xbc\x45\x64\xe4\xdb\xf3\xc5\xba\x11\x07\xcb\x12\xea\x25\x70\x1d\xd8\xe4\x28\xf9\x69\x99\x6f\x5f\xbe\x9e\x3b\xa8\xe4\x7f\xe2\xcb\x73\xdc\xe6\x02\x9f\xf4\xb9\xc3\x46\xb7\x9d\x44\xf5\xde\xe8\xb3\x3a\xac\x4a\x94\xc5\x6f\x00\x00\x00\xff\xff\x7b\xb1\xba\x2c\x52\x01\x00\x00")

func templatesComposeTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeTemplate,
		"templates/compose-template",
	)
}

func templatesComposeTemplate() (*asset, error) {
	bytes, err := templatesComposeTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-template", size: 338, mode: os.FileMode(511), modTime: time.Unix(1531462560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\xc8\x48\xcd\xc9\xc9\xd7\x2d\xcf\x2f\xca\x49\xe1\xe5\xe2\xe5\x72\x8d\x08\xf0\x0f\x76\x55\x88\x87\xd0\x2e\xf1\x01\xfe\x41\x21\x80\x00\x00\x00\xff\xff\x11\x07\x16\x72\x28\x00\x00\x00")

func templatesDockerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerTemplate,
		"templates/docker-template",
	)
}

func templatesDockerTemplate() (*asset, error) {
	bytes, err := templatesDockerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-template", size: 40, mode: os.FileMode(511), modTime: time.Unix(1531456150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x6f\xe3\x36\x0c\x7f\x5e\x80\x7c\x07\xce\x0b\xa0\x04\xa8\x9c\x76\x8f\x06\xf2\x50\x0c\xe9\x10\x60\x69\x8b\x75\xdb\xcb\x7a\x17\x28\x32\x6d\xeb\x22\x4b\x3e\x49\x36\x90\x4b\xfd\xdd\x0f\xb2\xe3\xc6\xf9\xd3\x6b\xcf\x2f\xb4\xc8\x1f\xc9\x1f\x29\x52\xbf\xfd\x3a\x2d\xad\x99\xae\x85\x9a\xa2\xaa\x20\x35\x5a\x57\xdb\xe1\x60\x38\x28\x44\x81\x52\x28\x84\xdd\x70\x00\xc0\x52\x54\x0e\x76\x20\xd9\x1a\x25\x90\x9c\x59\x87\x86\x40\xed\x6d\xa8\x2a\x61\xb4\xca\x1b\x84\x57\x00\x38\x96\xae\x2a\x34\x30\x03\x9b\xc1\xb8\xd5\x01\x58\x6e\x44\xe1\x22\x08\x52\xe1\x3c\x04\xa8\x04\x4a\xad\x36\x6e\x56\x45\x06\x13\xc5\x72\x84\x17\x70\x4c\x48\xa0\x37\xc1\x55\xe7\x67\xd0\x95\x46\x3d\xb9\x58\x97\x2e\x02\x67\x4a\xec\x2c\x93\xd0\x19\x91\x8f\x27\xdd\x99\xcb\xd2\x13\x5b\x35\x91\x66\x10\x8c\x76\x05\x33\x2c\xb7\x61\xdf\x50\x07\x1d\xbc\x30\xfa\x0b\x72\x77\x0e\xef\x1b\x0e\xf0\x44\x48\x5c\x89\xf8\x08\xb9\xd7\x75\xa0\xba\x15\xd6\xb1\x14\x6d\xd7\x8d\xfd\x79\x4c\xa4\x66\xb1\x6f\x17\x99\x1c\x4c\xde\x88\x85\xed\x2b\x7c\x21\x5a\x25\x22\xbd\x13\x12\x1f\x8d\xae\x44\x8c\x66\xfc\xff\x41\x37\xf6\x59\x17\x71\xe4\x79\xbc\x12\xb8\x82\x8a\x19\xc1\xd6\x12\x23\x20\xf3\xfb\xff\x56\x77\x8b\xbf\xe6\x64\xf2\x69\x72\x12\x1a\x79\xa6\x21\x80\xd9\xe1\x83\xcf\xbd\x0f\xfe\x46\x16\x0b\x95\xee\x29\x40\x62\x74\x0e\xaf\xc3\xd0\x5e\x21\x04\x47\x11\x6d\x06\x81\xc9\x81\x9a\x04\x42\x54\xd5\xb9\x91\x17\x30\xda\xa1\xaa\xc2\x8e\x56\x7d\x0e\xac\x0f\x87\xd7\xdf\xfa\xa4\x7f\xeb\x52\xc8\xf8\xdd\xe6\xf9\x8c\x16\x63\xa0\x02\x9e\x89\x8d\x24\x73\x68\x5d\x34\xda\xed\x87\xb2\x8e\x9e\x09\xac\xfe\x78\x58\x3e\x3e\x3c\xcd\x1b\x36\xab\xfb\xdb\xe5\x3c\x38\x0d\x11\x6b\xbe\x41\x43\xb9\xce\x0b\x6d\x11\x68\x72\xc1\x09\x1a\x46\x6f\xb8\x82\xc8\xfd\x14\x04\x1f\x28\x6c\xd3\x26\xf9\x50\x69\x7b\xac\xbf\x9f\x0a\x8d\xbb\x4c\xec\x8c\x52\xca\xa5\x2e\x63\xef\xe4\x98\x50\x68\xba\x55\xb1\x90\xa2\xa3\xdc\x60\x8c\xca\x09\x26\x2d\xc0\x68\x77\xb4\x2d\x40\xe9\x37\xad\x10\x98\x15\x8c\x5a\x5d\xba\x0c\x99\x75\x37\x94\x01\xa5\xfb\x3d\x81\xd1\xee\xf2\xc6\xfc\xa0\xe4\xa2\xb4\xd9\xbb\xf5\x1a\x74\x66\x3b\xbe\xb9\x3e\x9d\xe1\x7e\x49\xfb\x66\x53\x0a\x3e\x24\xa4\xdc\x84\x42\x4f\x4f\x18\x4d\x57\x8b\xe5\xed\x9f\x6d\x6f\x7a\xa3\xf0\xd6\x04\x02\x38\x91\xa3\x2e\xdd\xd8\xcb\x08\x7e\xbf\xbe\x82\x52\x09\x17\x01\x59\x2e\xee\xff\xfd\x67\xfe\x44\x2e\x51\x22\xcd\x6e\xf1\x0c\xf9\xc6\x6f\x50\x86\x4c\xba\x2c\x0c\x43\xf2\xb3\x83\x1e\x63\x21\xf5\xf6\x8d\xf6\xfc\xd2\xe6\x22\xa4\xf9\x15\x49\x23\x36\xe5\x1a\xb9\x93\xfe\x36\xc1\x56\x1c\x5e\x20\x35\x58\x00\xfd\x0a\xbd\xca\x1b\xa4\xcb\x50\x41\x9f\x50\xe7\xca\x8a\x42\x6e\x9b\x71\x3a\x78\xd0\x96\x89\x7f\xdb\xc3\x2d\xcb\x65\x13\x01\xa5\xc5\xa3\xa4\xc0\x0d\x32\x87\xef\xf8\x9e\x9a\x2d\x9a\x4a\x70\x3c\xc4\x4d\x44\x23\x08\x21\x2d\xb1\xb3\xee\xd4\xbd\x47\xb6\x1e\x0e\xbe\x07\x00\x00\xff\xff\xf9\x99\x7f\xb9\xbc\x06\x00\x00")

func templatesJenkinsTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsTemplate,
		"templates/jenkins-template",
	)
}

func templatesJenkinsTemplate() (*asset, error) {
	bytes, err := templatesJenkinsTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins-template", size: 1724, mode: os.FileMode(511), modTime: time.Unix(1531463481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/compose-dev-template": templatesComposeDevTemplate,
	"templates/compose-template": templatesComposeTemplate,
	"templates/docker-template": templatesDockerTemplate,
	"templates/jenkins-template": templatesJenkinsTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"compose-dev-template": &bintree{templatesComposeDevTemplate, map[string]*bintree{}},
		"compose-template": &bintree{templatesComposeTemplate, map[string]*bintree{}},
		"docker-template": &bintree{templatesDockerTemplate, map[string]*bintree{}},
		"jenkins-template": &bintree{templatesJenkinsTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

