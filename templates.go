// Code generated by go-bindata.
// sources:
// templates/compose-dev-template
// templates/compose-template
// templates/docker-template
// templates/jenkins-template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesComposeDevTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x6e\xc3\x20\x10\x86\x77\x4b\x7e\x87\x93\xf7\xd8\x52\x47\xb6\x28\xa1\x6d\xda\xa6\x8e\x92\x0c\xdd\x10\x31\x17\x0b\x85\x40\x75\x60\x9a\xc7\xaf\x6c\xa8\x6a\x33\x71\xff\x7d\xdf\x1d\x44\x24\xaf\x9d\x65\x50\x3d\x55\x65\x51\x16\x1e\x29\xea\x0e\x3d\x2b\x0b\x00\xb1\xdb\xaf\x5f\xb8\xf8\x5c\xef\xf9\x54\x03\xe8\xbb\xec\x91\x41\xdf\x51\xad\x5d\x23\x0e\xc7\xf6\x8d\x6f\xce\x13\xd1\xcc\x69\x23\x03\xfa\x90\x9c\xcb\xa0\x8d\xca\x3e\x40\xe7\x6c\xc0\x47\x60\x50\xff\x25\xca\x75\x37\xa4\xab\x36\xc8\x66\x77\xdf\x88\x6d\xbb\x79\xe7\x47\xf1\xbc\xfb\x48\x53\x93\x80\x36\x8a\x04\xd7\x68\x63\xca\xc6\xa1\x52\x5b\x24\x61\xe5\x1d\x19\x54\xb3\xb7\x54\x09\xf9\x71\x74\xd3\xb6\x17\x4a\x13\x83\x66\xf0\xd4\x78\xea\x52\x2b\x3a\x33\xdc\xf3\x97\xc7\xb3\x82\x9a\x2d\x89\x6f\x47\x61\xde\xaf\xc4\x6b\x7b\x3a\x8b\x43\x7b\x3c\x33\xc1\xbf\x0e\xed\x89\x6f\xa7\x2a\x2f\xb3\x18\xc6\x7d\x73\x45\xe1\x55\x0e\x26\xfc\x07\x17\xd2\xaa\xc7\x55\x46\xcb\x62\xe1\x64\x3a\xfb\x8a\x74\x44\x62\x59\x19\xb3\xa5\x9c\x31\x7c\x04\x24\x2b\x0d\x83\x40\x03\x96\xc5\x6f\x00\x00\x00\xff\xff\x0f\xc8\x09\xf1\xdc\x01\x00\x00")

func templatesComposeDevTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeDevTemplate,
		"templates/compose-dev-template",
	)
}

func templatesComposeDevTemplate() (*asset, error) {
	bytes, err := templatesComposeDevTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-dev-template", size: 476, mode: os.FileMode(511), modTime: time.Unix(1533807499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComposeTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4e\xc3\x30\x10\x44\xef\x91\xf2\x0f\x2b\xdf\x89\x25\x8e\xbe\x55\xad\x41\x05\x4a\xa2\xd0\x03\xb7\x55\x70\x96\x68\xd5\xd4\x46\x6b\xd7\xf0\xf9\x88\x18\x50\x7a\xdb\x99\x7d\x33\x9a\x4c\x12\x39\x78\x03\xea\x56\xd5\x55\x5d\x45\x92\xcc\x8e\xa2\xa9\x2b\x00\xdc\x1f\x36\xf7\x16\x9f\x37\x07\xbb\x68\x00\x3e\x0f\x13\x19\x98\x9c\x34\x1c\x34\x76\x7d\xfb\x60\xb7\xc7\x85\xd0\x6b\x7a\x1e\x12\xc5\x54\x32\x6f\x17\x9e\xc7\xdf\x3c\x80\x0b\x3e\xd1\x57\x32\xd0\xfc\x39\x63\x70\x27\x92\x77\x9e\xc9\xac\xee\xa8\x71\xd7\x6e\x1f\x6d\x8f\x77\xfb\xa7\xd2\x5a\x02\xe4\x33\x16\xb8\x21\x9f\x8b\xf7\x53\x3a\xb0\x27\x41\x3f\x9c\xc9\x80\x5a\x6d\x51\x05\xf9\x0c\x72\x62\x3f\xe1\xc8\x62\x40\x5f\xa2\xe8\x28\xae\xbc\x3e\x82\xa4\xf8\x3f\xf0\x06\x14\xda\xd7\xae\x7d\xb1\x3b\xec\xda\xfe\x68\xae\x94\xaa\xab\xef\x00\x00\x00\xff\xff\x89\x49\x75\x0f\x33\x01\x00\x00")

func templatesComposeTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesComposeTemplate,
		"templates/compose-template",
	)
}

func templatesComposeTemplate() (*asset, error) {
	bytes, err := templatesComposeTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/compose-template", size: 307, mode: os.FileMode(511), modTime: time.Unix(1533809677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x88\x77\x72\x0c\x76\x8d\xf7\xf4\x75\x74\x77\xe5\xe5\xe2\xe5\x72\x8d\x08\xf0\x0f\x76\x55\x88\x87\xd0\x2e\xf1\x01\xfe\x41\x21\x80\x00\x00\x00\xff\xff\x6a\xb8\xec\x2a\x28\x00\x00\x00")

func templatesDockerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerTemplate,
		"templates/docker-template",
	)
}

func templatesDockerTemplate() (*asset, error) {
	bytes, err := templatesDockerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker-template", size: 40, mode: os.FileMode(511), modTime: time.Unix(1533807499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x6f\xe3\x36\x10\xbd\x07\xc8\x7f\x98\xaa\x06\x64\x03\xa1\xbc\xe9\x51\x40\x0e\xc1\xd6\x5b\x04\x68\x3e\xb0\xd9\x16\x05\xea\xd6\xa0\xa9\x91\xc4\x86\x22\x59\x72\x24\xc0\xf5\xfa\xbf\x17\x94\xe5\x58\x72\xec\x3a\x8b\xea\x42\x91\x33\x7c\xf3\xf8\xe6\xe3\xfb\xef\xa6\xb5\x77\xd3\xa5\xd4\x53\xd4\x0d\x14\xce\x98\x66\x75\x79\x71\x79\x61\xa5\x45\x25\x35\xc2\xfa\xf2\x02\x80\x17\xa8\x09\xd6\xa0\xf8\x12\x15\xc4\x15\xf7\x84\x2e\x86\x4d\xb0\xa1\x6e\xa4\x33\xba\x6a\x3d\xc2\x01\x00\xf1\x62\xd1\xa0\x83\x1b\xf0\x25\x8c\xb7\x67\x00\x5e\x38\x69\x29\x85\xa8\x90\x14\x5c\x80\x29\x60\xcc\x1b\x47\x37\x4d\xea\x30\xd7\xbc\x42\xf8\x0a\xc4\xa5\x02\x76\x1d\x5d\xed\xee\x39\xa4\xda\xe9\x67\xca\x4c\x4d\x29\x90\xab\x71\x67\x99\x24\xe4\x64\x35\x9e\xec\xf6\x42\xd5\x81\xd8\xa2\x45\xba\x81\x68\xb4\xb6\xdc\xf1\xca\x27\x7d\xc3\x26\xda\xb9\x5b\x67\xfe\x42\x41\x6f\xdd\xfb\x86\xbd\x7b\x2e\x15\x2e\x64\x36\xf0\xec\xce\x76\x4e\x9b\xed\xe2\x89\x17\xe8\x77\x6a\x74\xfb\x71\xac\x0c\xcf\x82\x5c\xf1\x64\x6f\x0a\x46\xb4\xbe\x7f\x10\x1e\x62\x74\x2e\x8b\x4f\x52\xe1\x93\x33\x8d\xcc\xd0\x8d\x7f\xdf\x9f\x8d\x43\xd4\xbb\x2c\x0d\x3c\x5e\x09\x5c\x41\xc3\x9d\xe4\x4b\x85\x29\xc4\xb3\x87\x5f\x17\x9f\xee\x7e\x9e\xc5\x93\x3f\x26\x07\xd0\x28\x4a\x03\x11\xdc\xec\x3f\xf8\xb3\xf7\xc1\x67\xe4\x99\xd4\x45\x47\x01\x72\x67\x2a\x78\x2d\x86\x6d\x0a\x21\x1a\x20\xfa\x12\x22\x57\x01\x73\x39\x24\xa8\x9b\xb7\x46\x61\x61\xb4\x46\xdd\x24\x3b\x5a\x9b\xb7\x8e\x9b\xfd\xe6\xf5\x77\x73\xa0\xdf\xb2\x96\x2a\x3b\x2b\x5e\x88\xe8\x31\x03\x26\x61\x1e\xfb\x54\x71\x42\x4f\xe9\x68\xdd\x15\xe5\x26\x9d\xc7\xb0\xf8\xf8\x78\xff\xf4\xf8\x3c\x6b\xd9\x2c\x1e\x6e\xef\x67\xd1\x21\x44\x66\xc4\x0b\x3a\x26\x4c\x65\x8d\x47\x60\xf9\x91\x4b\xd0\x32\x3a\x71\x15\x64\x15\xaa\x20\x7a\xc7\xc3\x5e\xb6\x41\xde\xf5\xb4\xce\x37\xe4\xa7\x41\x47\xc7\x89\xbd\xa1\xd4\x13\x44\x9a\xa4\xc3\x48\x3c\xba\x46\x0a\x4c\xb9\xb5\xad\x2a\x77\xf7\xb7\x3f\x6d\x01\x58\x86\x56\x99\x55\x68\xea\x64\xc5\x2b\xf5\xff\x01\x3b\xd3\x59\xb4\x79\xb4\x98\xfd\x16\x5e\xf3\xe3\xe2\xe9\xf1\xf3\x97\x79\x94\xce\xa3\x92\xc8\x86\x9f\x6f\x40\x2c\x84\x32\x75\x16\x54\x22\x2e\x35\xba\xdd\x6c\xf0\x50\x20\x31\xe1\x30\x43\x4d\x92\x2b\x0f\x30\x5a\x0f\xc6\x03\x30\xf6\x8f\xd1\x08\xdc\x4b\xce\xbc\xa9\xa9\x44\xee\xe9\x9a\x71\x60\xac\x1b\x0c\x30\x5a\x1f\x1f\x11\xff\x91\x63\x5b\xfb\xf2\x6c\x82\x1d\x92\x5b\x8d\xaf\x3f\x1c\x36\x6d\xff\x49\x5d\x75\x31\x06\x01\x12\x0a\xe1\x12\x69\xa6\x07\x8c\xa6\x3d\xa1\x7a\xb5\x7f\xaa\xe5\x00\x48\x56\x68\x6a\x1a\x87\x35\x85\x1f\x3e\x5c\x41\xad\x25\xa5\x10\xdf\xdf\x3d\xfc\xf2\x65\xf6\x1c\x1f\xa3\x14\xb7\xc3\x44\x94\x28\x5e\xc2\xc8\x28\x91\x2b\x2a\x93\x24\x89\xbf\xb5\xb3\xb7\xd5\xf6\x9e\xfa\x8f\xe3\x78\x48\x43\xe6\xc3\x3d\xc0\x4b\xbd\x44\x41\x2a\x24\x1a\x7c\x23\x80\x69\x68\x75\x78\x7e\xba\xfd\xd8\xf5\xed\x57\x28\x1c\x5a\x60\x7f\xf7\x0b\x6a\x88\x43\x25\xea\x53\xc8\xdc\x5a\xb5\x6a\x3b\xef\x74\xc7\x1c\x09\x3b\x84\x43\xe5\xf1\x54\x00\xe1\x90\x13\x9e\x8d\x90\x9f\xec\x87\xb3\xd1\x73\xd9\xdf\x0f\x54\x3d\xcc\x52\xbb\x6c\x2e\x2f\xfe\x0d\x00\x00\xff\xff\xcd\xfd\x27\xa3\x2c\x08\x00\x00")

func templatesJenkinsTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsTemplate,
		"templates/jenkins-template",
	)
}

func templatesJenkinsTemplate() (*asset, error) {
	bytes, err := templatesJenkinsTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins-template", size: 2092, mode: os.FileMode(511), modTime: time.Unix(1537329470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/compose-dev-template": templatesComposeDevTemplate,
	"templates/compose-template": templatesComposeTemplate,
	"templates/docker-template": templatesDockerTemplate,
	"templates/jenkins-template": templatesJenkinsTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"compose-dev-template": &bintree{templatesComposeDevTemplate, map[string]*bintree{}},
		"compose-template": &bintree{templatesComposeTemplate, map[string]*bintree{}},
		"docker-template": &bintree{templatesDockerTemplate, map[string]*bintree{}},
		"jenkins-template": &bintree{templatesJenkinsTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

